<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Dahua Camera Player</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
</head>

<body>
    <!-- partial:index.partial.html -->
    <video id="test_video" controls autoplay src="<%= url %>"></video>
    <!-- partial -->
    <script src="
    https://cdn.jsdelivr.net/npm/streamedian@0.3.13/src/player.min.js
    "></script>
    <script type="module">
        var streamedian = _interopRequireWildcard(require("streamedian/player.js")); function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; } function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
        // import WebsocketTransport from 'wsp/transport/websocket';
        // import RTSPClient from 'wsp/client/rtsp/client';
        //import * as streamedian from 'https://cdn.jsdelivr.net/npm/streamedian@0.3.13/+esm';


        let mediaElement = rtsp.attach(document.getElementById('test_video'));
        let player = new streamedian.WSPlayer(mediaElement, {
            // url: `${STREAM_URL}`,      // overrides mediaElement's sources
            modules: [
                {
                    // client module constructor. Should be subclass or BaseClient. RTSPClient by default
                    // client: RTSPClient,
                    transport: {
                        // client module constructor. Should be subclass or BaseTransport. WebsocketTransport by default
                        // constructor: WebsocketTransport,
                        options: {
                            // address of websocket proxy described below. ws${location.protocol=='https:'?'s':''}://${location.host}/ws/ by default
                            socket: "ws://websocket_proxy_address/ws",
                            // function called player exceptions
                            errorHandler(e) {
                                alert(`Failed to start player: ${e.message}`);
                            },
                            // function to get credentials for protected streams
                            queryCredentials() {
                                return new Promise((resolve, reject) => {
                                    let c = prompt('input credentials in format user:password');
                                    if (c) {
                                        this.setCredentials.apply(this, c.split(':'));
                                        resolve();
                                    } else {
                                        reject();
                                    }
                                });
                            }
                        }
                    }
                }]
        });
    </script>

</body>

</html>