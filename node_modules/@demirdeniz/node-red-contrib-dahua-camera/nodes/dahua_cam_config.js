const dahuaCamera = require('./dahua-cam-api');
const nodeStatus = require('./utils').nodeStatus;


module.exports = function(RED) {
    function DahuaConfigNode(config) {
        RED.nodes.createNode(this,config);
        var node = this;

		var set_timeout = true;
        
		this.DahuaName = config.DahuaName;
		this.DahuaIP = config.DahuaIP;
		this.DahuaPort = config.DahuaPort;
		this.DahuaUserName = config.DahuaUserName;
		this.DahuaUserPwd = config.DahuaUserPwd;
		this.DahuaURLBase = config.DahuaURLBase;
		const dahua_info =  {ip:this.DahuaIP, port:this.DahuaPort};
		const user_info =  {name:this.DahuaUserName, pwd:this.DahuaUserPwd};


        node.status({});
        nodeStatus(node, 'yellow', 'connecting...');

        const dahuaInstance = new dahuaCamera.dahua({
            host: this.DahuaIP,
            port: this.DahuaPort,
            user: this.DahuaUserName,
            pass: this.DahuaUserPwd,
            log: false,
        });

        dahuaInstance.on('connect', function (options) {
            nodeStatus(node, 'green', 'connected to ' + options.host);
        });

        dahuaInstance.on('error', function (error) {
            nodeStatus(node, 'red', 'error: ' + error);
        });

        dahuaInstance.on('end', function () {
            nodeStatus(node, 'yellow', 'disconnected');
        });

        dahuaInstance.on('alarm', function (code, action, index, metadata) {
            node.send({
                topic: [code, index, action].join('/'),
                payload: action,
                metadata,
                index,
                code,
            });
            nodeStatus(node, 'green', 'processed ' + code + ' event');
        });



       node.on('input', function(msg) {
           if(msg.payload == "OPEN_DOOR")
               dahuaInstance.openDoor();
           else
           if(msg.payload == "CLOSE_DOOR")
               dahuaInstance.closeDoor();
           else
           if(msg.payload == "GET_DOOR_STATUS")
               dahuaInstance.getDoorStatus();
           else
           if(msg.payload == "GET_CONFIG"){
               msg = {payload: dahua_info, data: user_info};   
               node.send(msg);
           }
           
/*            switch(msg.payload){
                case "CONNECT":
                {
                    node.status({});
                    nodeStatus(node, 'yellow', 'connecting...');
                    
                }                    
                break;
                
                case "GET_CONFIG":
                    msg = {payload: dahua_info, data: user_info};   
                break;
                
                else
                    msg=null;
            }
   */         
            
        });
    }
    RED.nodes.registerType("Dahua Config", DahuaConfigNode);
}