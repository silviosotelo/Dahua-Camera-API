var events = require('events');
var util = require('util');
var request = require('request');
var progress = require('request-progress');
var setKeypath = require('keypather/set');
var fs = require('fs');
var path = require('path');
var moment = require('moment');

// getting os module type
const os = require('os');
var ostype = os.type();
console.log("Operating System type: " + ostype);

//keep alive is not supported on windows nodejs
//if(ostype == "Darwin" || ostype == "Linux" )
//    var NetKeepAlive = require('net-keepalive')


var RECONNECT_TIMEOUT_SECONDS = 10;

var dahua = function(options) {

    events.EventEmitter.call(this);

    this.TRACE = options.log;

    this.BASEURI = 'http://' + options.host + ':' + options.port;
    this.USER = options.user;
    this.PASS = options.pass;
    this.HOST = options.host;

    if (options.cameraAlarms === undefined) {
        options.cameraAlarms = true;
    }

    if (options.cameraAlarms) {
        this.client = this.connect(options)
    }

    this.on('error', function(err) {
        console.log("Error: " + err);
    });

};

util.inherits(dahua, events.EventEmitter);

// set up persistent connection to recieve alarm events from camera
dahua.prototype.connect = function(options) {

    var self = this;
    var connected = false;
    var eventNames = [
        'All'
    ];

    var opts = {
        'url': self.BASEURI + '/cgi-bin/eventManager.cgi?action=attach&codes=[' + eventNames.join(',') + ']',
        'forever': true,
        'headers': {
            'Accept': 'multipart/x-mixed-replace'
        }
    };

    console.log("Connecting...");
    var client = request(opts).auth(self.USER, self.PASS, false);

    client.on('socket', function(socket) {
        // Set keep-alive probes - throws ESOCKETTIMEDOUT error after ~16min if connection broken
        socket.setKeepAlive(true, 1000);
        //keep alive is not supported yet on Windows
        if((ostype == "Darwin") || (ostype == "Linux")){
            //NetKeepAlive.setKeepAliveInterval(socket, 1000);
            //if (self.TRACE) console.log('TCP_KEEPINTVL:',NetKeepAlive.getKeepAliveInterval(socket));

            //NetKeepAlive.setKeepAliveProbes(socket, 1);
            //if (self.TRACE) console.log('TCP_KEEPCNT:',NetKeepAlive.getKeepAliveProbes(socket));
        }

    });

    client.on('response', function() {
        connected = true;
        handleDahuaEventConnection(self, options);
    });

    client.on('error', function(err) {
        if (!connected) {
            console.error("Connection closed- reconnecting in " + RECONNECT_TIMEOUT_SECONDS + " seconds...");
            setTimeout(function() {
                self.connect(options);
            }, RECONNECT_TIMEOUT_SECONDS * 1000);
        }
        handleDahuaEventError(self, err);
    });

    client.on('data', function(data) {
        handleDahuaEventData(self, data);
    });

    client.on('close', function() { // Try to reconnect after 30s
        connected = false;
        console.error("Connection closed- reconnecting in " + RECONNECT_TIMEOUT_SECONDS + " seconds...");
        setTimeout(function() {
            self.connect(options);
        }, RECONNECT_TIMEOUT_SECONDS * 1000);
        handleDahuaEventEnd(self);
    });

    client.on('error', function(err) {
        handleDahuaEventError(self, err);
    });

};

function handleDahuaEventData(self, data) {
    if (self.TRACE) console.log('Data: ' + data.toString());
    data = data.toString().split('\r\n');
    var i = Object.keys(data);
    i.forEach(function(id) {
        if (data[id].startsWith('Code=')) {
            var alarm = data[id].split(';');
            if (alarm.length >= 3) {
                var code = alarm[0].substr(5);
                var action = alarm[1].substr(7);
                var index = alarm[2].substr(6);

                // an alarm can have also a data object
                // which is multiline in the body
                var metadata = {};

                if (alarm.length >= 4 && alarm[3].startsWith('data={')) {
                    var metadataArray = alarm[3].split('\n');
                    metadataArray[0] = '{'; // we don't want "data={"

                    metadata = metadataArray.join('');
                    try {
                        metadata = JSON.parse(metadata);
                        if (self.TRACE) console.dir(metadata, 'Got JSON parsed metadata');
                    } catch (e) {
                        self.emit("error", "Error during JSON.parse of alarm extra data");
                        console.error(e, 'Error during JSON.parse of alarm extra data');
                    }
                }

                self.emit("alarm", code, action, index, metadata);
            }
        }
    });
}

function handleDahuaEventConnection(self, options) {
    if (self.TRACE) console.log('Connected to ' + options.host + ':' + options.port);
    //self.socket = socket;
    self.emit("connect", options);
}

function handleDahuaEventEnd(self) {
    if (self.TRACE) console.log("Connection closed!");
    self.emit("end");
}

function handleDahuaEventError(self, err) {
    if (self.TRACE) console.log("Connection error: " + err);
    self.emit("error", err);
}


dahua.prototype.openDoor = function() {
    var self = this;
    if (self.TRACE) console.log(self.BASEURI + '/cgi-bin/accessControl.cgi?action=openDoor&channel=1&UserID=9901&Type=Remote');
    request(self.BASEURI + '/cgi-bin/accessControl.cgi?action=openDoor&channel=1&UserID=9901&Type=Remote', function(error, response, body) {
        if ((error) || (response.statusCode !== 200) || (body.trim() !== "OK")) {
            self.emit("error", 'FAILED TO EXECUTE Open Door COMMAND');
        }
    }).auth(self.USER, self.PASS, false);
};

dahua.prototype.closeDoor = function() {
    var self = this;
    if (self.TRACE) console.log(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote');
    request(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote', function(error, response, body) {
        if ((error) || (response.statusCode !== 200) || (body.trim() !== "OK")) {
            self.emit("error", 'FAILED TO EXECUTE Close Door COMMAND');
        }
    }).auth(self.USER, self.PASS, false);
};

dahua.prototype.getDoorStatus = function() {
    var self = this;
    if (self.TRACE) console.log(self.BASEURI + '/cgi-bin/accessControl.cgi?action=getDoorStatus&channel=1');
    request(self.BASEURI + '/cgi-bin/accessControl.cgi?action=getDoorStatus&channel=1', function(error, response, body) {
        if ((error) || (response.statusCode !== 200) ) {
            self.emit("error", 'FAILED TO EXECUTE Get Door Status COMMAND');
        }else{
            body = body.toString().split('\r\n');
            if (self.TRACE) console.log("GetDoorStatus : Body --> " + body); //GetDoorStatus Body --> Info.status=Close,
            self.emit("alarm", "DoorStatus", "Pulse", 0, body); //doorStatus
        }
    }).auth(self.USER, self.PASS, false);
};

dahua.prototype.answerCall = function() {
    var self = this;
    if (self.TRACE) console.log(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote');
    request(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote', function(error, response, body) {
        if ((error) || (response.statusCode !== 200) || (body.trim() !== "OK")) {
            self.emit("error", 'FAILED TO EXECUTE Close Door COMMAND');
        }
    }).auth(self.USER, self.PASS, false);
};


dahua.prototype.hangupCall = function() {
    var self = this;
    if (self.TRACE) console.log(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote');
    request(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote', function(error, response, body) {
        if ((error) || (response.statusCode !== 200) || (body.trim() !== "OK")) {
            self.emit("error", 'FAILED TO EXECUTE Close Door COMMAND');
        }
    }).auth(self.USER, self.PASS, false);
};

dahua.prototype.rejectCall = function() {
    var self = this;
    if (self.TRACE) console.log(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote');
    request(self.BASEURI + '/cgi-bin/accessControl.cgi?action=closeDoor&channel=1&UserID=9901&Type=Remote', function(error, response, body) {
        if ((error) || (response.statusCode !== 200) || (body.trim() !== "OK")) {
            self.emit("error", 'FAILED TO EXECUTE Close Door COMMAND');
        }
    }).auth(self.USER, self.PASS, false);
};

/*====================================
=            Get Snapshot            =
====================================*/

// API Description
//
// URL Syntax
// http://<ip>/cgi-bin/snapshot.cgi? [channel=<channelNo>]

// Response
// A picture encoded by jpg

// Comment
// The channel number is default 0 if the request is not carried the param.

dahua.prototype.getSnapshot = function(options) {
    var self = this;

    options = options || {};

    if ((!options.channel)) {
        options.channel = 0;
    }

    if ((!options.path)) {
        options.path = '';
    }

    if (!options.filename) {
        options.filename = this.generateFilename(self.HOST, options.channel, moment(), '', 'jpg');
    }

    request(self.BASEURI + '/cgi-bin/snapshot.cgi?' + options.channel, function(error, response, body) {
            if ((error) || (response.statusCode !== 200)) {
                self.emit("error", 'ERROR ON SNAPSHOT');
            }
        })
        .on('end', function() {
            if (self.TRACE) console.log('SNAPSHOT SAVED');
            self.emit("getSnapshot", {
                'status': 'DONE',
            });
        })
        .auth(self.USER, self.PASS, false).pipe(fs.createWriteStream(path.join(options.path, options.filename)));
    // TBD: file writing error handling

};



String.prototype.startsWith = function(str) {
    return this.slice(0, str.length) == str;
};

exports.dahua = dahua;